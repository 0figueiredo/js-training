#!/usr/bin/env node

(async () => {
'use strict'

// extend str for colors
'no0.blk30.red31.grn32.ylw33.blu34.mgt35.cyn36.wht37'
  .split('.')
  .map(str => str.split(/([0-9]+)$/))
  .forEach(([ name, value ]) => {
    String.prototype[name] = function () { return `\u001b[${value}m${this}\u001b[0m` }
    String.prototype[`_${name}`] = function () { return `\u001b[${value};1m${this}\u001b[0m` }
  })

const fs = require('fs')
const { performance: { now } } = require('perf_hooks')
const { promisify } = require('util')
const readdir = promisify(fs.readdir)
const upperCaseSecond = (_, m) => m.toUpperCase()
const files = (await readdir(__dirname))
  .filter(filename => /^[^.].+\.js$/.test(filename))

const current = []
const ok = '  ✓ '.grn()

const errKey = true ? 'stack' : 'message'
const formatPathParts = (value, i) => i
  ? ':'.mgt() + value.blu()
  : value.slice(__dirname.length + 1)

const prettyPath = p => p.split(':').map(formatPathParts).join('')

const parseStackLine = (line, err) => {
  if (!line) return ''
  let [ , src, path ] = line.split(/at (.+) \((.+)\)$/)
  if (!src) return ` (${prettyPath(line)})`
  if ((src).includes('anonymous')) {
    src = err.key ? `assert.${err.key.cyn()}` :(err.name || 'Error').cyn()
  }
  return ` (${src} ${prettyPath(path)})`
}

const prettyStack = err => err.message.red()
  + parseStackLine(err.stack.split('\n')
    .filter(line => line.includes(current.filename))[0], err)

const assert = require('assert')
Object.keys(assert).forEach(key => {
  const fn = assert[key]
  const last = fn.length - 1
  assert[key] = (...args) => {
    try {
      fn(...args)
      current.push(`${ok}${current.length + 1} - ${args[last] || key}`)
    } catch (err) {
      current.allPass = false
      err.key = key
      current.push(`  ✗ ${current.length + 1} `.red() + prettyStack(err))
    }
  }
})

files.forEach((filename, i) => {
  current.length = 0
  current.allPass = true
  current.filename = filename
  try {
    require(`${__dirname}/${filename}`)
    if (current.allPass) {
      console.log('✓'.grn(), filename)
    } else {
      console.log('-'.blu(), filename)
      console.log(current.join('\n'))
    }
  } catch (err) {
    console.log(`✗ ${filename}: ${prettyStack(err)}`.red())
  }
})

})().catch(console.error)
